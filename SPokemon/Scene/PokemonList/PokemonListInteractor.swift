//
//  IntroInteractor.swift
//  SPokemon
//
//  Created by JosÃ© Moreira on 20/12/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Domain

protocol IntroBusinessLogic: BaseBusinessLogic {
    func fetchData(request: PokemonList.List.Request)
    func didSelectPokemon(request: PokemonList.SelectedPokemon.Request)
    func fetchNextPage(request: PokemonList.List.Request)
}

protocol PokemonListDataStore {
    var selectedPokemon: PokemonModel? { get set }
}

class PokemonListInteractor: BaseInteractor, IntroBusinessLogic, PokemonListDataStore {

    var selectedPokemon: PokemonModel?

    var presenter: PokemonListPresentationLogic?

    private var worker: PokemonListWorker?
    private var pokemonList = [PokemonModel]()
    private var offset = 0
    private var nextPage: String?
    private var isLoadingNextPage = false

    override func basePresenter() -> BasePresentationLogic? { return presenter }

    func fetchData(request: PokemonList.List.Request) {
        worker = PokemonListWorker()

        presentLoading()
        fetchPokemonList()
    }

    func didSelectPokemon(request: PokemonList.SelectedPokemon.Request) {
        selectedPokemon = pokemonList.first(where: { $0.name == request.name })
        let response = PokemonList.SelectedPokemon.Response()
        presenter?.presentPokemonDetail(response: response)
    }

    func fetchNextPage(request: PokemonList.List.Request) {
        if let next = nextPage,
           !isLoadingNextPage,
           let newOffset = next.getoffset() {
            self.offset = newOffset
            self.isLoadingNextPage = true
            fetchPokemonList()
        }
    }

    private func fetchPokemonList() {
        worker?.fetchPokemonList(offset: offset).subscribe(onSuccess: { [weak self] model in
            guard let self = self else { return }
            self.nextPage = model.next
            self.pokemonList.append(contentsOf: model.results)
            self.presentHideLoading()
            self.isLoadingNextPage = false
            let response = PokemonList.List.Response(pokemonList: self.pokemonList)
            self.presenter?.presentPokemonList(response: response)
        }, onError: { error in
            let response = BaseModel.Error.Response(message: "adsasd")
            self.presenter?.presentError(response: response)
        }).disposed(by: disposeBag)
    }
}
