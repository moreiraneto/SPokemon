//
//  IntroViewController.swift
//  SPokemon
//
//  Created by Jos√© Moreira on 20/12/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxDataSources
import RxSwift
import Common

protocol PokemonListDisplayLogic: BaseDisplayLogic {
    func displayPokemonList(viewModel: PokemonList.List.ViewModel)
    func displayPokemonDetail(viewModel: PokemonList.SelectedPokemon.ViewModel)
}

class PokemonListViewController: BaseViewController<PokemonListView> {
    var interactor: IntroBusinessLogic?
    var router: (NSObjectProtocol & IntroRoutingLogic & IntroDataPassing)?

    private typealias Section = AnimatableSectionModel<String, PokemonList.TableItem>
    private var tableItems = BehaviorSubject<[Section]>(value: [])

    // MARK: Setup
    override func setup() {
        let viewController = self
        let interactor = PokemonListInteractor()
        let presenter = PokemonListPresenter()
        let router = PokemonListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    override func bindUI() {
        super.bindUI()
        _view.tableView.rx.setDelegate(self).disposed(by: disposeBag)

        let animation = AnimationConfiguration(insertAnimation: .top, reloadAnimation: .top, deleteAnimation: .bottom)
        let datasource = RxTableViewSectionedAnimatedDataSource<Section>(animationConfiguration: animation,
                                                                         configureCell: { [weak self] _, tableView, indexPath, item in
                                                                            guard let self = self else { return UITableViewCell() }
                                                                            return self.setupCell(tableView: tableView, indexPath: indexPath, item: item)
                                                                         })

        tableItems
            .asObserver()
            .bind(to: _view.tableView.rx.items(dataSource: datasource))
            .disposed(by: disposeBag)

        _view
            .tableView
            .rx
            .modelSelected(PokemonList.TableItem.self)
            .bind { [weak self] item in
                guard let self = self else { return }
                switch item {
                case .pokemon(let name, _):
                    self.selectPokemon(with: name)
                }
            }.disposed(by: disposeBag)

        _view
            .tableView
            .rx
            .contentOffset
            .asObservable()
            .filter { _ in self._view.tableView.isScrollAlmostReachingBottom() }
            .subscribe(onNext: { [weak self] _ in
                self?.fetchNextPage()
            }).disposed(by: disposeBag)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        fetchData()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupBaseNavigationBar()
    }

    private func fetchData() {
        let request = PokemonList.List.Request()
        interactor?.fetchData(request: request)
    }

    private func fetchNextPage() {
        let request = PokemonList.List.Request()
        interactor?.fetchNextPage(request: request)
    }

    private func selectPokemon(with name: String) {
        let request = PokemonList.SelectedPokemon.Request(name: name)
        self.interactor?.didSelectPokemon(request: request)
    }

    private func setupCell(tableView: UITableView, indexPath: IndexPath, item: PokemonList.TableItem) -> UITableViewCell {
        switch item {
        case .pokemon(let name, let imgeUrl):
            let cell = tableView.forceDequeueReusableCell(indexPath, type: PokemonNameTableViewCell.self)
            cell.setupCell(with: name, imageUrl: imgeUrl)
            return cell
        }
    }
}

// MARK: - UITableViewDelegate
extension PokemonListViewController: UITableViewDelegate {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        0
    }
}

extension PokemonListViewController: PokemonListDisplayLogic {

    func displayPokemonList(viewModel: PokemonList.List.ViewModel) {
        title = viewModel.title
        let sections = [Section(model: "", items: viewModel.pokemonList.items)]
        tableItems.onNext(sections)
    }

    func displayPokemonDetail(viewModel: PokemonList.SelectedPokemon.ViewModel) {
        router?.showPokemonDetail()
    }
}
